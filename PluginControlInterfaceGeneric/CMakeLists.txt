CMAKE_MINIMUM_REQUIRED(VERSION 2.8.8)

INCLUDE(CMakeDependentOption)
FIND_PACKAGE(PkgConfig)

PROJECT(PluginControlInterfaceGeneric)

IF (NOT DAEMONVERSION)
    MESSAGE(STATUS "Building without AudioManager, searching for cmake definition")
	SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_SOURCE_DIR}/cmake)
    FIND_PACKAGE(AudioManager)  
    IF (AUDIOMANAGER_FOUND)
        INCLUDE ("${AUDIOMANAGER_CMAKE_CONFIG_PATH}/audiomanagerConfig.cmake")
        SET(PLUGINS_OUTPUT_PATH ${CMAKE_CURRENT_BINARY_DIR}) 
        SET(TEST_EXECUTABLE_OUTPUT_PATH ${CMAKE_CURRENT_BINARY_DIR}) 
        IF(WITH_TESTS)
            ADD_SUBDIRECTORY(${GOOGLE_MOCK_PROJECT_FOLDER} ${CMAKE_CURRENT_BINARY_DIR}/gmock)
        ENDIF(WITH_TESTS)
        
        SET(COMMONAPI_DBUS_CONFIGURATIONS "") 
    ELSE(AUDIOMANAGER_FOUND)
        MESSAGE(FATAL_ERROR "Could not find audiomanager cmake configuration")
    ENDIF(AUDIOMANAGER_FOUND)
ENDIF (NOT DAEMONVERSION)            

#OPTION (WITH_DOCUMENTATION
#        "build plugins with documentation" OFF )
OPTION (NSM_IFACE_PRESENT
        "Node state manager interface present in Generic Controller" OFF )

IF(WITH_DLT)    
    PKG_CHECK_MODULES(DLT REQUIRED automotive-dlt>=2.2.0)
    ADD_DEFINITIONS(${DLT_CFLAGS_OTHER})
    INCLUDE_DIRECTORIES(${DLT_INCLUDE_DIRS})
    LINK_DIRECTORIES(${DLT_LIBRARY_DIRS})
ENDIF(WITH_DLT)

SET(PLUGIN_LIB_NAME PluginControlInterface)
SET(LIBRARY_OUTPUT_PATH ${PLUGINS_OUTPUT_PATH}/control)

SET(INCLUDE_FOLDER "include")

IF(NSM_IFACE_PRESENT)
    FIND_PACKAGE(NSM REQUIRED)
ENDIF(NSM_IFACE_PRESENT)
FIND_PACKAGE(LibXml2 REQUIRED)

IF (NSM_IFACE_PRESENT)
INCLUDE_DIRECTORIES(
${CMAKE_SOURCE_DIR} 
${STD_INCLUDE_DIRS}
${CMAKE_CURRENT_BINARY_DIR}
${AUDIO_INCLUDE_FOLDER}
${AUDIOMANAGER_INCLUDE_FOLDER}
${AUDIOMANAGER_UTILITIES_INCLUDE}
${INCLUDE_FOLDER}
${NSM_INCLUDE_DIR}
${LIBXML2_INCLUDE_DIR}
)
ELSE ()
INCLUDE_DIRECTORIES(
${CMAKE_SOURCE_DIR} 
${STD_INCLUDE_DIRS}
${CMAKE_CURRENT_BINARY_DIR}
${AUDIO_INCLUDE_FOLDER}
${AUDIOMANAGER_INCLUDE_FOLDER}
${AUDIOMANAGER_UTILITIES_INCLUDE}
${INCLUDE_FOLDER}
${LIBXML2_INCLUDE_DIR}
)
ENDIF(NSM_IFACE_PRESENT)
# all source files go here
FILE(GLOB PLUGIN_CONTROL_GENERIC_SRCS_CXX "src/*.cpp")

# strip the path prefix from the absolute file path and save in macro __FILENAME__
# the macro __FILENAME__ shall be used for logging inside generic controller code
FOREACH(SRC_FILE_ABSOLUTE_PATH IN LISTS PLUGIN_CONTROL_GENERIC_SRCS_CXX)
    GET_FILENAME_COMPONENT(SRC_FILE_NAME ${SRC_FILE_ABSOLUTE_PATH} NAME)
IF(NSM_IFACE_PRESENT)
    SET_PROPERTY(SOURCE ${SRC_FILE_ABSOLUTE_PATH} PROPERTY COMPILE_DEFINITIONS NSM_IFACE_PRESENT "__FILENAME__=\"${SRC_FILE_NAME}\"")
ELSE()
    SET_PROPERTY(SOURCE ${SRC_FILE_ABSOLUTE_PATH} PROPERTY COMPILE_DEFINITIONS "__FILENAME__=\"${SRC_FILE_NAME}\"")
ENDIF(NSM_IFACE_PRESENT)
ENDFOREACH()

ADD_LIBRARY(${PLUGIN_LIB_NAME} MODULE ${PLUGIN_CONTROL_GENERIC_SRCS_CXX})

TARGET_LINK_LIBRARIES(${PLUGIN_LIB_NAME}
	${DLT_LIBRARIES}
	${LIBXML2_LIBRARIES}
)

INSTALL(TARGETS ${PLUGIN_LIB_NAME}
    DESTINATION lib/${LIB_INSTALL_SUFFIX}/control
    PERMISSIONS OWNER_EXECUTE OWNER_WRITE OWNER_READ GROUP_EXECUTE GROUP_READ WORLD_EXECUTE WORLD_READ
    COMPONENT plugin
)

INSTALL(DIRECTORY conf/
    DESTINATION /etc/controllerconf
    COMPONENT conf
)

# set(DOXY_FILE ${CMAKE_CURRENT_BINARY_DIR}/PluginControlGeneric.doxyfile)
# set(DOC_OUTPUT_PATH ${CMAKE_CURRENT_BINARY_DIR}/doc
#     CACHE STRINGS "The doxygen documentation will be placed here")  

# if(WITH_DOCUMENTATION)
#     find_package(Doxygen)
#     configure_file(${CMAKE_SOURCE_DIR}/PluginControlInterfaceGeneric/doc/PluginControlGeneric.doxyfile ${CMAKE_CURRENT_BINARY_DIR}/doc/Doxyfile)
#     add_custom_target (PluginControlGenericDoku ALL  
#         COMMAND ${DOXYGEN_EXECUTABLE} ${DOC_OUTPUT_PATH}/Doxyfile WORKING_DIRECTORY ${DOC_OUTPUT_PATH}
#         SOURCES ${CMAKE_SOURCE_DIR}/PluginControlInterfaceGeneric ${DOC_OUTPUT_PATH}/Doxyfile
#     )
#     file(COPY ${CMAKE_SOURCE_DIR}/PluginControlInterfaceGeneric/doc/images/ DESTINATION ${DOC_OUTPUT_PATH}/images/)    
# endif(WITH_DOCUMENTATION)
