/**

\page policyhandling Flowchart of Policy Handling


This sections covers the way policies are evaluated, the detailed syntax of the writing policies
is covered in a separate section. A list of policies is present in a configuration , on start up 
configuration is parsed and the list of policy is stored inside Policy engine. The policy consist 
of trigger and process. Policy engine outputs a list of actions for a given trigger 
based on conditions.In order to realize the desired use cases, it is important to  understand 
the logic of policy evaluation.

The below diagram shows the flow of policy evaluation
\image html PolicyEvaluation.png

Example of use case realization:

Let us assume a system with phone and mediaplayer as audio source. The use case
which needs to be realized is, while the phone is active mediaplayer should not be active and after
the phone call is over the interrupted mediaplayer should resume.

 
pseudo code for the use case is as below
\htmlonly
    <div class="fragment"><pre class="fragment">
    <font color="#0066FF">
    if(trigger == connection request)
    {</font><font color="#B30085">
        if(requesting source == phone && isConnected(mediaplayer))</font> // 1<font color="#B30085">
        {</font><font color="#66FF33">
            action.add(push mediaplayer connection);</font><font color="#B30085">
        }</font> <font color="#B30085">
        if(requesting source == mediaplayer && isConnected(phone))</font> // 2<font color="#B30085">
        {</font><font color="#66FF33">
            action.add(push mediaplayer connection);</font><font color="#FF0000">
            return;</font><font color="#B30085">
        }</font><font color="#66FF33">
        action.add(connect requesting connection)</font> // 3<font color="#0066FF"> 
    }</font><font color="#0066FF">
    if(trigger == disconnection request) 
    {</font><font color="#66FF33">
        action.add(disconnect requesting connection)</font> // 4<font color="#B30085">
        if(requesting source == phone)</font> // 5<font color="#B30085">
        {</font><font color="#66FF33">
            action.add(pop mediaplayer connection);</font><font color="#B30085">
        }</font><font color="#0066FF">
    }</font>
    </pre></div>
\endhtmlonly

The above can be written in generic controller configuration as
\htmlonly
<div class="fragment"><pre class="fragment">
    &lt;policy<font color="#0066FF"> trigger="USER_CONNECTION_REQUEST"</font> &gt; 
        &lt;process name="1"&gt;<font color="#B30085">
            &lt;condition&gt;name(SOURCE, REQUESTING) EQ "phone"&lt;/condition&gt;
            &lt;condition&gt;connectionState(CONNECTIONOFSOURCE, "mediaplayer") INC CS_CONNECTED&lt;/condition&gt;</font><font color="#66FF33">
            &lt;action type="ACTION_PUSH" sourceName="N:mediaplayer" connectionState="CS_CONNECTED"/&gt;</font>
        &lt;/process&gt;
        &lt;process name="2"&gt;<font color="#B30085">
            &lt;condition&gt;name(SOURCE, REQUESTING) EQ "mediaplayer"&lt;/condition&gt;
            &lt;condition&gt;connectionState(CONNECTIONOFSOURCE, "phone") INC CS_CONNECTED&lt;/condition&gt;</font><font color="#66FF33">
            &lt;action type="ACTION_PUSH" sourceName="N:mediaplayer"/&gt;</font><font color="#FF0000">
            &lt;break&gt;TRUE&lt;/break&gt;</font>
        &lt;/process&gt;
        &lt;process name="3"&gt;<font color="#66FF33">
            &lt;action type="ACTION_MUTE" sinkName="REQUESTING"/&gt;
            &lt;action  type="ACTION_CONNECT" sourceName="REQUESTING" sinkName="REQUESTING"/&gt;
            &lt;action type="ACTION_UNMUTE" sinkName&gt;REQUESTING&lt;/sinkName/&gt;</font>
        &lt;/process&gt;
    &lt;/policy&gt;
    &lt;policy <font color="#0066FF"> trigger="USER_DISCONNECTION_REQUEST"</font>&gt;
        &lt;process name="4"/&gt;<font color="#66FF33">
            &lt;action type="ACTION_DISCONNECT" sourceName="REQUESTING" sinkName="REQUESTING"/&gt;</font>
        &lt;/process&gt;
        &lt;process name="5"/&gt;<font color="#B30085">
            &lt;condition&gt;name(SOURCE, REQUESTING) EQ "phone"&lt;/condition&gt;</font><font color="#66FF33">
            &lt;action type="ACTION_POP" sourceName="N:mediaplayer"/&gt;</font>
        &lt;/process&gt;
    &lt;/policy&gt;

</pre></div>

\endhtmlonly

The tag <i>'name'</i> is used to give some identifier to the process, in this example number 1-5 are 
used to identify the process.

consider the scenario, when Phone connection is requested when mediaplayer is already active.<BR>
1. The list of all the process which matches the trigger are process 1,2 and 3 above.<BR>
2. The policy engine would start executing the process in this order<BR>
    - conditions for Process 1 and 3 would evaluate to true

The resulting set of actions would be <BR>
    - push mediaplayer connection<BR>
    - mute phone<BR>
    - connect phone connection<BR>
    - unmute phone<BR>

consider the scenario, when media connection is requested when phone is already active.<BR>
1. The list of all the process which matches the trigger are, process 1,2 and 3 above.<BR>
2. The policy engine would start executing the process in this order<BR>
    - conditions for Process 2 would evaluate to true and since it has stop on evaluation no further conditions are
    evaluated.<BR>

The resulting set of actions would be <BR>
    - push mediaplayer connection<BR>

consider the scenario, when media connection is requested and no phone connection present<BR>
1. The list of all the process which matches the trigger are, process 1,2 and 3 above.<BR>
2. The policy engine would start executing the process in this order<BR>
    - conditions for Process 3 would evaluate to true.<BR>

The resulting set of actions would be <BR>
    - mute phone<BR>
    - connect mediaPlayer connection<BR>
    - unmute phone<BR>

*/