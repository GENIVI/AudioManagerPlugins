/**
\page functionTable Functions

Conditions usually require to compare a given value against an attribute
of an element. Below family of predefined functions can be used to access
such attributes.

<table>
 <tr>
  <th>Function Format</th>
  <th>Return Type</th>
  <th>Description</th>
  <th>Valid Operand Types</th>
  <th>Example Expression</th>
 </tr>

 <!-- name -->
 <tr>
  <td><b>name</b>(elementType)</td>
  <td>string</td>
  <td>returns name of particular element from trigger parameter</td>
  <td>SOURCE, SINK, DOMAIN, CONNECTION, CLASS</td>
  <td>name(SOURCE) EQ &quot;MediaPlayer&quot;<br>
      name(SINK) EQ &quot;Speaker&quot;<br>
      name(CLASS) NE &quot;INTERRUPT&quot;</td>
 </tr>
 <tr>
  <td><b>name</b>(elementTypeOfType)<br>
      <b>name</b>(elementTypeOfType, elementName)</td>
  <td>string</td>
  <td>returns name of particular element that source, sink belongs to.<br>
      If elementName is not specified or REQUESTING, trigger parameter is<br>
      automatically chosen by elementTypeOfType.</td>
  <td>CLASSOFSOURCE, CLASSOFSINK, DOMAINOFSOURCE, DOMAINOFSINK</td>
  <td>name(CLASSOFSOURCE) EQ &quot;BASE&quot;<br>
      name(DOMAINOFSINK, &quot;Bluetooth&quot;) EQ &quot;TestDomain&quot;<br>
      name(DOMAINOFSINK) EQ name(DOMAINOFSINK, &quot;Bluetooth&quot;)</td>
 </tr>
 <tr>
  <td><b>name</b>(elementTypeOfType)<br>
      <b>name</b>(elementTypeOfType, elementName)</td>
  <td>string[]</td>
  <td>returns list of names of source, sink which belong to
      elementType derived from trigger parameter.<br>
      If elementName is not specified or REQUESTING, trigger parameter is
      automatically chosen by elementTypeOfType.</td>
  <td>SOURCEOFCLASS, SINKOFCLASS</td>
  <td>name(SOURCEOFCLASS) INC &quot;Bluetooth&quot;<br>
      name(SINKOFCLASS, &quot;Speaker&quot;) INC &quot;Headphone&quot;</td>
 </tr>

 <!-- elements -->
 <tr>
  <td><b>elements</b>(containerType, containerName, childType)</td>
  <td>string[]</td>
  <td>returns a list of all child elements of type childType, <br>
      contained in parent element specified by containerType and containerName</td>
  <td>DOMAIN, CLASS</td>
  <td>elements(CLASS, REQUESTING, CONNECTION) INC &quot;MediaPlayer:Amp&quot;<br>
      elements(DOMAIN, "DSP", SINK) INC &quot;Amp&quot;</td>
 </tr>

 <!-- priority -->
 <tr>
  <td><b>priority</b>(elementType)<br> 
      <b>priority</b>(elementType, elementName)</td>
  <td>integer</td>
  <td>returns priority of particular element.<br>
      If elementName is not specified or REQUESTING, trigger parameter is
      automatically chosen by elementType.</td>
  <td>SOURCE, SINK, CONNECTION, CLASS, CONNECTIONOFCLASS</td>
  <td>priority(SOURCE) LT 20<br>
      priority(SOURCE, REQUESTING) GT priority(SOURCE,&quot;RadioTuner&quot;)<br> </td>
 </tr>

 <!-- volume -->
 <tr>
  <td><b>volume</b>()<br>
      <b>volume</b>(elementType)<br>
      <b>volume</b>(elementType, elementName)</td>
  <td>@ref am::am_volume_t "am_volume_t"</td>
  <td>returns volume.<br>
      If both elementType and elementName are not specified it returns the value
      updated by system.<br>
      If elementType is not specified or REQUESTING, trigger parameter is
      automatically chosen by elementType.</td>
  <td>SOURCE, SINK, CONNECTION, CLASS</td>
  <td>volume() GT 40<br>
      volume(SOURCE) LT 40<br>
      volume(SINK) EQ 30<br>
      volume(SOURCE) LT volume(SOURCE, &quot;MediaPlayer&quot;)</td>
 </tr>

 <!-- mainVolume -->
 <tr>
  <td><b>mainVolume</b>()<br>
      <b>mainVolume</b>(elementType)<br>
      <b>mainVolume</b>(elementType, elementName)</td>
  <td>@ref am::am_mainVolume_t "am_mainVolume_t"</td>
  <td>returns main volume.<br>
      If both elementType and elementName are not specified it returns the value
      set by user.<br>
      If elementName is not specified or REQUESTING, trigger parameter is
     automatically chosen by elementType.</td>
  <td>SINK, CONNECTION, CLASS, USER (default)</td>
  <td>mainVolume() GT 40<br>
      mainVolume(SINK) EQ 10<br>
      mainVolume(SINK, &quot;Speaker&quot;) LT 40<br>
      mainVolume(SINK) EQ mainVolume(CLASS, &quot;BASE&quot;)</td>
 </tr>

 <!-- isMainVolumeStep -->
 <tr>
  <td><b>isMainVolumeStep</b>()</td>
  <td>boolean</td>
  <td>returns TRUE if above, user-specified mainVolume is meant relative to current mainVolume
      (i.e. populated from the volumeStep() function instead of the setVolume() function),
      returns FALSE otherwise.</td>
   <td>n/a</td>
   <td>isMainVolumeStep() EQ TRUE</td>
 </tr>

 <!-- volumeLimit -->
 <tr>
  <td><b>volumeLimit</b>(elementType)<br>
      <b>volumeLimit</b>(elementType, elementName)</td>
  <td>@ref am::am_volume_t "am_volume_t"</td>
  <td>returns the most restrictive volume limit.<br>
      If no limit is active on given element, the return value is 0.<br>
      If elementName is not specified or REQUESTING, trigger parameter is
      automatically chosen by elementType.</td>
  <td>SOURCE, SINK, CONNECTION</td>
  <td>volumeLimit(SOURCE) LT -40<br>
      volume(SOURCE, "MediaPlayer") LT volumeLimit(CONNECTION, "mediaPlayer:amp")</td>
 </tr>

 <!-- systemPropertyType -->
 <tr>
  <td><b>systemPropertyType</b>()</td>
  <td>@ref am::am_CustomSystemPropertyType_t "am_CustomSystemPropertyType_t"</td>
  <td>returns system property type set by user</td>
   <td>n/a</td>
  <td>systemPropertyType() NE SYP_UNKNOWN</td>
 </tr>

 <!-- systemPropertyValue -->
 <tr>
  <td><b>systemPropertyValue</b>()<br>
      <b>systemPropertyValue</b>(SYSTEM)<br>
      <b>systemPropertyValue</b>(SYSTEM, propertyType)</td>
  <td>int16_t</td>
  <td>returns system property value.<br>
      If nothing is specified, it returns the value set by user.<br>
      If propertyType is not specified, trigger parameter is automatically selected.</td>
  <td>USER (default), SYSTEM</td>
  <td>systemPropertyValue() EQ 100<br>
      systemPropertyValue(SYSTEM, SYP_UNKNOWN) EQ 10</td>
 </tr>

 <!-- soundProperty -->
 <tr>
  <td><b>soundProperty</b>(elementType, elementName, propertyType)</td>
  <td>int16_t</td>
  <td>Find the device i.e. router side property value based on element type and name.</td>
  <td>SOURCE, SINK</td>
  <td>soundProperty(SINK, &quot;Speaker&quot;, SP_GENIVI_BASS) EQ 10</td>
 </tr>

 <!-- mainSoundPropertyType -->
 <tr>
  <td><b>mainSoundPropertyType</b>()</td>
  <td>@ref am::am_CustomMainSoundPropertyType_t "am_CustomMainSoundPropertyType_t"</td>
  <td>returns main sound property type set by user, or updated by routing side</td>
  <td>n/a</td>
  <td>mainSoundPropertyType() NE MSP_UNKOWN</td>
 </tr>

 <!-- mainSoundPropertyValue -->
 <tr>
  <td><b>mainSoundPropertyValue</b>()<br>
      <b>mainSoundPropertyValue</b>(elementType)<br>
      <b>mainSoundPropertyValue</b>(elementType, elementName, propertyType)</td>
  <td>int16_t</td>
  <td>returns main sound property value.<br>
      If nothing is specified, it returns the value notified by system.<br>
      If elementName and propertyType are not specified, trigger parameter is
      automatically selected by elementType.</td>
  <td>SOURCE, SINK, USER (default)</td>
  <td>mainSoundPropertyValue() EQ -10<br>
      mainSoundPropertyValue(SOURCE) EQ 10<br>
      mainSoudPropertyValue(SINK, &quot;Speaker&quot;, MSP_GENIVI_BASS) EQ 10</td>
 </tr>

 <!-- muteState -->
 <tr>
  <td><b>muteState</b>()<br>
      <b>muteState</b>(elementType)<br>
      <b>muteState</b>(elementType, elementName)</td>
  <td>@ref am::am_MuteState_e "am_MuteState_e"</td>
  <td>returns mute state.<br>
      If both elementType and elementName are not specified it returns the value
      set by user or updated by routing side.<br>
      If elementType is not specified or REQUESTING, trigger parameter is
      automatically selected by elementType.</td>
  <td>SINK, CONNECTION, CLASS, USER (default)</td>
  <td>muteState() EQ MS_MUTED<br>
      muteState(SINK, &quot;Speaker&quot;) NE MS_UNKNOWN</td>
 </tr>

 <!-- availability -->
 <tr>
  <td><b>availability</b>()<br>
    <b>availability</b>(elementType)<br>
    <b>availability</b>(elementType, elementName)</td>
  <td>@ref am::am_Availability_e "am_Availability_e"</td>
  <td>returns availability.<br>
      If both elementType and elementName are not specified it returns the value
      updated by system.<br>
      If elementName is not specified or REQUESTING, trigger parameter is
      automatically selected by elementType<br>
      if elementType is CONNECTION, sources and sinks of all route segments are checked.
      Returns A_UNKNOWN if any route point is invalid or A_UNKNOWN, 
      A_UNAVAILABLE if any of the points is A_UNAVAILABLE, A_AVAILABLE otherwise</td>
  <td>SOURCE, SINK, CONNECTION, USER (default)</td>
  <td>availability() EQ A_AVAILABLE<br>
      availability(SOURCE) NE A_UNAVAILABLE<br>
      availability(SINK, &quot;Speaker&quot;) EQ A_AVAILABLE<br>
      availability(CONNECTION, "MediaPlayer:Amp") EQ A_AVAILABLE</td>
 </tr>

 <!-- availabilityReason -->
 <tr>
  <td><b>availabilityReason</b>()<br>
      <b>availabilityReason</b>(elementType)<br>
      <b>availabilityReason</b>(elementType, elementName)</td>
  <td>@ref am::am_CustomAvailabilityReason_t "am_CustomAvailabilityReason_t"</td>
  <td>returns availability reason.<br>
      If both elementType and elementName are not specified it returns the value
      updated by system.<br>
      If elementName is not specified or REQUESTING, trigger parameter is
      automatically selected by elementType</td>
  <td>SOURCE, SINK, USER (default)</td>
  <td>availabilityReason() EQ AR_UNKOWN<br>
      availabilityReason(SOURCE) NE AR_GENIVI_NEWMEDIA <br>
      availabilityReason(SINK, &quot;Speaker&quot;) EQ AR_GENIVI_TEMPERATURE</td>
 </tr>

<!-- connectionState -->
 <tr>
  <td><b>connectionState</b>()<br>
      <b>connectionState</b>(elementType)<br>
      <b>connectionState</b>(CONNECTION, connectionName)</td>
  <td>@ref am::am_ConnectionState_e "am_ConnectionState_e"</td>
  <td>returns state of main connection which is specified in
      trigger parameter.<br>
      returns the connection state of given connection name.</td>
  <td>USER (default), CONNECTION</td>
  <td>connectionState() EQ CS_CONNECTED<br>
      connectionState(CONNECTION, &quot;RadioTuner:Amp&quot;) EQ CS_CONNECTED</td>
 </tr>
 <tr>
  <td><b>connectionState</b>(elementType)<br>
      <b>connectionState</b>(elementType, elementName)</td>
  <td>@ref am::am_ConnectionState_e "am_ConnectionState_e"[]</td>
  <td>returns the list of state of main connections<br>
      If elementName is not specified or REQUESTING, trigger parameter is
      automatically selected by elementType</td>
  <td>CONNECTIONOFSOURCE, CONNECTIONOFSINK, CONNECTIONOFCLASS</td>
  <td>connectionState(SOURCE) INC CS_CONNECTED<br>
    connectionState(SINK, &quot;Speaker&quot;) INC CS_SUSPENDED</td>
 </tr>

 <!-- interruptState -->
 <tr>
  <td><b>interruptState</b>()<br>
      <b>interruptState</b>(elementType)<br>
      <b>interruptState</b>(elementType, elementName)</td>
  <td>@ref am::am_InterruptState_e "am_InterruptState_e"</td>
  <td>returns interrupt state.<br>
      If both elementType and elementName are not specified it returns the value
      updated by system.<br>
      If elementName is not specified or REQUESTING, trigger parameter is
      automatically selected by elementType</td>
  <td>SOURCE, CONNECTION, USER (default)</td>
  <td>interruptState(SOURCE) EQ IS_INTERRUPTED<br>
      interruptState(SOURCE, &quot;PDC&quot;) EQ IS_OFF<br>
      interruptState(CONNECTION, &quot;PDC:Amp&quot;) EQ IS_OFF</td>
 </tr>

 <!-- state -->
 <tr>
  <td><b>state</b>(elementType)<br>
      <b>state</b>(elementType, elementName)</td>
  <td>@ref am::am_SourceState_e "am_SourceState_e"<br>
      @ref am::am_DomainState_e "am_DomainState_e"</td>
  <td>returns state of particular element<br>
      If elementName is not specified, trigger parameter is automatically
      selected by elementType</td>
  <td>SOURCE, DOMAIN</td>
  <td>state(SOURCE) EQ SS_ON<br>
      state(SOURCE, &quot;RadioTuner&quot;) NE SS_ON<br>
      state(DOMAIN, &quot;TestDomian&quot;) EQ DS_CONTROLLED</td>
 </tr>

 <!-- isRegistered -->
 <tr>
  <td><b>isRegistered</b>(elementType)<br>
      <b>isRegistered</b>(elementType, elementName)</td>
  <td>boolean</td>
  <td>returns result of registration of particular element.<br>
      If elementName is not specified or REQUESTING, trigger parameter is
      automatically selected by elementType</td>
  <td>SOURCE, SINK, GATEWAY, DOMAIN</td>
  <td>isRegistered(SOURCE) EQ TRUE<br>
      isRegistered(SOURCE, &quot;MediaPlayer&quot;) EQ TRUE<br>
      isRegistered(SINK, &quot;Speaker&quot;) EQ TRUE</td>
 </tr>

 <!-- isRegistrationComplete -->
 <tr>
  <td><b>isRegistrationComplete</b>(DOMAIN)<br>
      <b>isRegistrationComplete</b>(DOMAIN, domainName)</td>
  <td>boolean</td>
  <td>check if particular domain indicated by &quot;domainName&quot; is registered<br>
      If domainName is not specified, all domains are indicated.</td>
  <td>DOPMAIN</td>
  <td>isRegisterationComplete(DOMAIN) EQ TRUE<br>
      isRegisterationComplete(DOMAIN, &quot;TestDomain&quot;) EQ FALSE</td>
 </tr>

 <!-- peek -->
 <tr>
  <td><b>peek</b>(elementTypeOfType,className, Order, Index)</td>
  <td>string</td>
  <td>returns the element name belonging to connection queue maintained by class based on order and index. <br>
      If className is not specified or REQUESTING is specified then className is obtained from trigger parameter.
      If order and Index if not specified order is considered as HIGH_PRIOIRTY and index as 1.</td>
  <td>SOURCEOFCLASS, SINKOFCLASS</td>
  <td>peek(SOURCEOFCLASS, &quot;BASE&quot;,O_NEWEST,2) EQ &quot;Mic1&quot;<br>
      peek(SOURCEOFCLASS, REQUESTING, O_NEWEST) EQ &quot;BT&quot;<br>
      peek(SOURCEOFCLASS, REQUESTING, O_NEWEST,2) EQ &quot;Mic1&quot;<br>
      peek(SINKOFCLASS) EQ &quot;Mono0&quot;</td>
 </tr>

 <!-- notificationConfigurationStatus -->
 <tr>
  <td><b>notificationConfigurationStatus</b>(elementType, elementName, notificationType)</td>
  <td>@ref am::am_NotificationStatus_e "am_NotificationStatus_e"</td>
  <td>it returns the status of notification type.<br>
      If REQUESTING is specified then elementName is obtained from trigger parameter.</td>
 <td>SOURCE, SINK, USER</td>
  <td>notificationConfigurationStatus(SOURCE,REQUESTING,NT_TEMP) EQ NS_PERIODIC<br>
    notificationConfigurationStatus(SINK,&quot;NAVI1&quot;, NT_TEMP) EQ NS_MINIMUM</td>
 </tr>

 <!-- notificationConfigurationParam -->
 <tr>
  <td><b>notificationConfigurationParam</b>(elementType, elementName, notificationType)</td>
  <td>int16_t</td>
  <td>Returns the value of notification type.<br>
      If REQUESTING is specified then elementName is obtained from trigger parameter.</td>
  <td>SOURCE, SINK, USER</td>
  <td>notificationConfigurationParam(SOURCE,REQUESTING,NT_TEMP) EQ 5<br>
      notificationConfigurationParam(SINK,&quot;NAVI1&quot;, NT_TEMP) EQ 2</td>
 </tr>

 <!-- notificationDataValue -->
 <tr>
  <td><b>notificationDataValue</b>()</td>
  <td>int16_t</td>
  <td>it returns the notification value as received during notification data change request from system</td>
  <td>n/a</td>
  <td>notificationDataValue() EQ 2</td>
 </tr>

 <!-- notificationDataType -->
 <tr>
  <td><b>notificationDataType</b>()</td>
  <td>@ref am::am_CustomNotificationType_t "am_CustomNotificationType_t"</td>
  <td>it returns the notification data type as receive in trigger parameter from the system</td>
  <td>n/a</td>
  <td>notificationDataType() EQ NT_TEMP</td>
 </tr>

 <!-- mainNotificationConfigurationStatus -->
 <tr>
  <td><b>mainNotificationConfigurationStatus</b>(elementType, elementName, notificationType)</td>
  <td>@ref am::am_NotificationStatus_e "am_NotificationStatus_e"</td>
  <td>it returns the status of main notification type.<br>
      If REQUESTING is specified as elementName or notificationType then
      elementName or notificationType is obtained from trigger parameter.</td>
  <td>SOURCE, SINK</td>
  <td>mainNotificationConfigurationStatus(SOURCE,REQUESTING,REQUESTING) EQ NS_PERIODIC<br>
      mainNotificationConfigurationStatus(SINK,&quot;NAVI1&quot;, NT_TEMP) EQ NS_MINIMUM</td>
 </tr>

 <!-- mainNotificationConfigurationParam -->
 <tr>
  <td><b>mainNotificationConfigurationParam</b>(elementType, elementName, notificationType)</td>
  <td>int16_t</td>
  <td>it returns the value of main notification type.<br>
      If REQUESTING is specified as elementName or notificationType then
      elementName or notificationType is obtained from trigger parameter.</td>
  <td>SOURCE, SINK</td>
  <td>mainNotificationConfigurationParam(SOURCE,REQUESTING,NT_TEMP) EQ 5<br>
      mainNotificationConfigurationParam(SINK,&quot;NAVI1&quot;, REQUESTING) EQ 2</td>
 </tr>

 <!-- mainNotificationConfigurationType -->
 <tr>
  <td><b>mainNotificationConfigurationType</b>()</td>
  <td>@ref am::am_CustomNotificationType_t "am_CustomNotificationType_t"</td>
  <td>Returns the configuration type from trigger parameter</td>
  <td>n/a</td>
  <td>mainNotificationConfigurationType() EQ NT_TEMP</td>
 </tr>

<!-- error -->
 <tr>
  <td><b>error</b>()</td>
  <td>@ref am::am_Error_e "am_Error_e"</td>
  <td>Returns the error code from trigger status.</td>
  <td>n/a</td>
  <td>error() EQ E_UNKNOWN</td>
 </tr>

<!-- count -->
 <tr>
  <td><b>count</b>(ignoredType, argumentList)</td>
  <td>int</td>
  <td>Counts the number of words contained in argument list.</td>
  <td>any (will be ignored)</td>
  <td>count(SYSTEM, elements(CLASS, REQUESTING, CONNECTION)) GT 0<br>
      count(SYSTEM, elements(DOMAIN, "navigation", SOURCE)) EQ 1</td>
 </tr>

<!-- scale -->
 <tr>
  <td><b>scale</b>(ignoredType, value, conversionMap)</td>
  <td>int</td>
  <td>Scales the value according to interpolation points given in conversionMap.<br>
      Map can be specified directly or as name to a scaleConversionMap definition in the @ref templatesection section</td>
  <td>any (will be ignored)</td>
  <td>scale(SYSTEM, "-25", "myConversionMap") GT 0<br>
      scale(SYSTEM, "17.5", "-20., 0.;-10., 5.") EQ 1</td>
 </tr>

</table>


*/